//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `cardIssuers.json`.
    static let cardIssuersJson = Rswift.FileResource(bundle: R.hostingBundle, name: "cardIssuers", pathExtension: "json")
    /// Resource file `installments.json`.
    static let installmentsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "installments", pathExtension: "json")
    /// Resource file `paymentMethods.json`.
    static let paymentMethodsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "paymentMethods", pathExtension: "json")
    
    /// `bundle.url(forResource: "cardIssuers", withExtension: "json")`
    static func cardIssuersJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cardIssuersJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "installments", withExtension: "json")`
    static func installmentsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.installmentsJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "paymentMethods", withExtension: "json")`
    static func paymentMethodsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.paymentMethodsJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `avatar`.
    static let avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar")
    
    /// `UIImage(named: "avatar", bundle: ..., traitCollection: ...)`
    static func avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `MPCardIssuersTableViewCell`.
    static let mpCardIssuersTableViewCell = _R.nib._MPCardIssuersTableViewCell()
    /// Nib `MPPaymentCostsTableViewCell`.
    static let mpPaymentCostsTableViewCell = _R.nib._MPPaymentCostsTableViewCell()
    /// Nib `MPPaymentMethodsTableViewCell`.
    static let mpPaymentMethodsTableViewCell = _R.nib._MPPaymentMethodsTableViewCell()
    
    /// `UINib(name: "MPCardIssuersTableViewCell", in: bundle)`
    static func mpCardIssuersTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mpCardIssuersTableViewCell)
    }
    
    /// `UINib(name: "MPPaymentCostsTableViewCell", in: bundle)`
    static func mpPaymentCostsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mpPaymentCostsTableViewCell)
    }
    
    /// `UINib(name: "MPPaymentMethodsTableViewCell", in: bundle)`
    static func mpPaymentMethodsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mpPaymentMethodsTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MPCardIssuersTableViewCell`.
    static let mpCardIssuersTableViewCell: Rswift.ReuseIdentifier<MPCardIssuersTableViewCell> = Rswift.ReuseIdentifier(identifier: "MPCardIssuersTableViewCell")
    /// Reuse identifier `MPPaymentCostsTableViewCell`.
    static let mpPaymentCostsTableViewCell: Rswift.ReuseIdentifier<MPPaymentCostsTableViewCell> = Rswift.ReuseIdentifier(identifier: "MPPaymentCostsTableViewCell")
    /// Reuse identifier `MPPaymentMethodsTableViewCell`.
    static let mpPaymentMethodsTableViewCell: Rswift.ReuseIdentifier<MPPaymentMethodsTableViewCell> = Rswift.ReuseIdentifier(identifier: "MPPaymentMethodsTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 9 localization keys.
    struct localizable {
      /// Base translation: Finish
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static let conclude = Rswift.StringResource(key: "conclude", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR", "es-419", "Base"], comment: nil)
      /// Base translation: Loading...
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static let loading = Rswift.StringResource(key: "loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR", "es-419", "Base"], comment: nil)
      /// Base translation: Next
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static let next = Rswift.StringResource(key: "next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR", "es-419", "Base"], comment: nil)
      /// Base translation: Previous
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static let prev = Rswift.StringResource(key: "prev", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR", "es-419", "Base"], comment: nil)
      /// Base translation: Select again
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static let selectAgain = Rswift.StringResource(key: "selectAgain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR", "es-419", "Base"], comment: nil)
      /// Base translation: Select bank
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static let selectBank = Rswift.StringResource(key: "selectBank", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR", "es-419", "Base"], comment: nil)
      /// Base translation: Select installmentes:
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static let selectInstallments = Rswift.StringResource(key: "selectInstallments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR", "es-419", "Base"], comment: nil)
      /// Base translation: Select payment method
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static let selectPaymentMethod = Rswift.StringResource(key: "selectPaymentMethod", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR", "es-419", "Base"], comment: nil)
      /// Base translation: Unable to load the information. No bank associated with the means of payment.
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static let errorLoadingInformation = Rswift.StringResource(key: "errorLoadingInformation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR", "es-419", "Base"], comment: nil)
      
      /// Base translation: Finish
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static func conclude(_: Void = ()) -> String {
        return NSLocalizedString("conclude", bundle: R.hostingBundle, value: "Finish", comment: "")
      }
      
      /// Base translation: Loading...
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static func loading(_: Void = ()) -> String {
        return NSLocalizedString("loading", bundle: R.hostingBundle, value: "Loading...", comment: "")
      }
      
      /// Base translation: Next
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static func next(_: Void = ()) -> String {
        return NSLocalizedString("next", bundle: R.hostingBundle, value: "Next", comment: "")
      }
      
      /// Base translation: Previous
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static func prev(_: Void = ()) -> String {
        return NSLocalizedString("prev", bundle: R.hostingBundle, value: "Previous", comment: "")
      }
      
      /// Base translation: Select again
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static func selectAgain(_: Void = ()) -> String {
        return NSLocalizedString("selectAgain", bundle: R.hostingBundle, value: "Select again", comment: "")
      }
      
      /// Base translation: Select bank
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static func selectBank(_: Void = ()) -> String {
        return NSLocalizedString("selectBank", bundle: R.hostingBundle, value: "Select bank", comment: "")
      }
      
      /// Base translation: Select installmentes:
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static func selectInstallments(_: Void = ()) -> String {
        return NSLocalizedString("selectInstallments", bundle: R.hostingBundle, value: "Select installmentes:", comment: "")
      }
      
      /// Base translation: Select payment method
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static func selectPaymentMethod(_: Void = ()) -> String {
        return NSLocalizedString("selectPaymentMethod", bundle: R.hostingBundle, value: "Select payment method", comment: "")
      }
      
      /// Base translation: Unable to load the information. No bank associated with the means of payment.
      /// 
      /// Locales: en, pt-BR, es-419, Base
      static func errorLoadingInformation(_: Void = ()) -> String {
        return NSLocalizedString("errorLoadingInformation", bundle: R.hostingBundle, value: "Unable to load the information. No bank associated with the means of payment.", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 21 localization keys.
    struct main {
      /// pt-BR translation: -
      /// 
      /// Locales: pt-BR, es-419
      static let gBAHiGjpText = Rswift.StringResource(key: "gBA-Hi-gjp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: -
      /// 
      /// Locales: pt-BR, es-419
      static let mc8UUPsmText = Rswift.StringResource(key: "mc8-UU-psm.text", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: -
      /// 
      /// Locales: pt-BR, es-419
      static let pdAAJkQText = Rswift.StringResource(key: "8pd-aA-jkQ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: -
      /// 
      /// Locales: pt-BR, es-419
      static let prXLRR5HText = Rswift.StringResource(key: "PrX-lR-R5H.text", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: -
      /// 
      /// Locales: pt-BR, es-419
      static let vkadta6Text = Rswift.StringResource(key: "7VK-aD-tA6.text", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: -
      /// 
      /// Locales: pt-BR, es-419
      static let zPI6ScMText = Rswift.StringResource(key: "0zP-I6-ScM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: < Anterior
      /// 
      /// Locales: pt-BR, es-419
      static let o0RFuU8sNormalTitle = Rswift.StringResource(key: "o0R-fu-U8s.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: < Anterior
      /// 
      /// Locales: pt-BR, es-419
      static let wd994VgFNormalTitle = Rswift.StringResource(key: "wd9-94-vgF.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: < Anterior
      /// 
      /// Locales: pt-BR, es-419
      static let y2o3BWfMNormalTitle = Rswift.StringResource(key: "Y2o-3B-wfM.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: A operação de pagamento foi concluída com o valor de :
      /// 
      /// Locales: pt-BR, es-419
      static let mjfN6OJuText = Rswift.StringResource(key: "Mjf-n6-OJu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: Concluir
      /// 
      /// Locales: pt-BR, es-419
      static let gotGUZg0NormalTitle = Rswift.StringResource(key: "Got-GU-Zg0.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: Concluir
      /// 
      /// Locales: pt-BR, es-419
      static let udAQSfcNormalTitle = Rswift.StringResource(key: "4Ud-aQ-sfc.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: Ok
      /// 
      /// Locales: pt-BR, es-419
      static let hhzLm68nTitle = Rswift.StringResource(key: "Hhz-Lm-68n.title", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: Próximo >
      /// 
      /// Locales: pt-BR, es-419
      static let dZaDpC3GNormalTitle = Rswift.StringResource(key: "dZa-dp-c3G.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: R$ 0,00
      /// 
      /// Locales: pt-BR, es-419
      static let nWfCcB72Text = Rswift.StringResource(key: "nWf-Cc-b72.text", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: R$ 0,00
      /// 
      /// Locales: pt-BR, es-419
      static let oFnUe6cfPlaceholder = Rswift.StringResource(key: "OFn-ue-6cf.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: R$ 0,00
      /// 
      /// Locales: pt-BR, es-419
      static let uodVnOb5Text = Rswift.StringResource(key: "uod-Vn-ob5.text", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: R$ 0,00
      /// 
      /// Locales: pt-BR, es-419
      static let xiDiFtsText = Rswift.StringResource(key: "6Xi-Di-fts.text", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: Selecione a quantidade de parcelas:
      /// 
      /// Locales: pt-BR, es-419
      static let ddg980wCText = Rswift.StringResource(key: "ddg-98-0wC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: Selecione o banco:
      /// 
      /// Locales: pt-BR, es-419
      static let fym15X7oText = Rswift.StringResource(key: "fym-15-X7o.text", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      /// pt-BR translation: Selecione o meio de pagamento:
      /// 
      /// Locales: pt-BR, es-419
      static let yrGXkABbText = Rswift.StringResource(key: "YrG-Xk-aBb.text", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR", "es-419"], comment: nil)
      
      /// pt-BR translation: -
      /// 
      /// Locales: pt-BR, es-419
      static func gBAHiGjpText(_: Void = ()) -> String {
        return NSLocalizedString("gBA-Hi-gjp.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: -
      /// 
      /// Locales: pt-BR, es-419
      static func mc8UUPsmText(_: Void = ()) -> String {
        return NSLocalizedString("mc8-UU-psm.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: -
      /// 
      /// Locales: pt-BR, es-419
      static func pdAAJkQText(_: Void = ()) -> String {
        return NSLocalizedString("8pd-aA-jkQ.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: -
      /// 
      /// Locales: pt-BR, es-419
      static func prXLRR5HText(_: Void = ()) -> String {
        return NSLocalizedString("PrX-lR-R5H.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: -
      /// 
      /// Locales: pt-BR, es-419
      static func vkadta6Text(_: Void = ()) -> String {
        return NSLocalizedString("7VK-aD-tA6.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: -
      /// 
      /// Locales: pt-BR, es-419
      static func zPI6ScMText(_: Void = ()) -> String {
        return NSLocalizedString("0zP-I6-ScM.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: < Anterior
      /// 
      /// Locales: pt-BR, es-419
      static func o0RFuU8sNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("o0R-fu-U8s.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: < Anterior
      /// 
      /// Locales: pt-BR, es-419
      static func wd994VgFNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("wd9-94-vgF.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: < Anterior
      /// 
      /// Locales: pt-BR, es-419
      static func y2o3BWfMNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Y2o-3B-wfM.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: A operação de pagamento foi concluída com o valor de :
      /// 
      /// Locales: pt-BR, es-419
      static func mjfN6OJuText(_: Void = ()) -> String {
        return NSLocalizedString("Mjf-n6-OJu.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: Concluir
      /// 
      /// Locales: pt-BR, es-419
      static func gotGUZg0NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Got-GU-Zg0.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: Concluir
      /// 
      /// Locales: pt-BR, es-419
      static func udAQSfcNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("4Ud-aQ-sfc.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: Ok
      /// 
      /// Locales: pt-BR, es-419
      static func hhzLm68nTitle(_: Void = ()) -> String {
        return NSLocalizedString("Hhz-Lm-68n.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: Próximo >
      /// 
      /// Locales: pt-BR, es-419
      static func dZaDpC3GNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("dZa-dp-c3G.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: R$ 0,00
      /// 
      /// Locales: pt-BR, es-419
      static func nWfCcB72Text(_: Void = ()) -> String {
        return NSLocalizedString("nWf-Cc-b72.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: R$ 0,00
      /// 
      /// Locales: pt-BR, es-419
      static func oFnUe6cfPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("OFn-ue-6cf.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: R$ 0,00
      /// 
      /// Locales: pt-BR, es-419
      static func uodVnOb5Text(_: Void = ()) -> String {
        return NSLocalizedString("uod-Vn-ob5.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: R$ 0,00
      /// 
      /// Locales: pt-BR, es-419
      static func xiDiFtsText(_: Void = ()) -> String {
        return NSLocalizedString("6Xi-Di-fts.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: Selecione a quantidade de parcelas:
      /// 
      /// Locales: pt-BR, es-419
      static func ddg980wCText(_: Void = ()) -> String {
        return NSLocalizedString("ddg-98-0wC.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: Selecione o banco:
      /// 
      /// Locales: pt-BR, es-419
      static func fym15X7oText(_: Void = ()) -> String {
        return NSLocalizedString("fym-15-X7o.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: Selecione o meio de pagamento:
      /// 
      /// Locales: pt-BR, es-419
      static func yrGXkABbText(_: Void = ()) -> String {
        return NSLocalizedString("YrG-Xk-aBb.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _MPCardIssuersTableViewCell.validate()
      try _MPPaymentMethodsTableViewCell.validate()
    }
    
    struct _MPCardIssuersTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MPCardIssuersTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MPCardIssuersTableViewCell"
      let name = "MPCardIssuersTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MPCardIssuersTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MPCardIssuersTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "avatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'avatar' is used in nib 'MPCardIssuersTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MPPaymentCostsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MPPaymentCostsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MPPaymentCostsTableViewCell"
      let name = "MPPaymentCostsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MPPaymentCostsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MPPaymentCostsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MPPaymentMethodsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MPPaymentMethodsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MPPaymentMethodsTableViewCell"
      let name = "MPPaymentMethodsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MPPaymentMethodsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MPPaymentMethodsTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "avatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'avatar' is used in nib 'MPPaymentMethodsTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let cardIssuersViewController = StoryboardViewControllerResource<MPCardIssuersViewController>(identifier: "CardIssuersViewController")
      let finishPaymentViewController = StoryboardViewControllerResource<MPFinishPaymentViewController>(identifier: "FinishPaymentViewController")
      let installmentsViewController = StoryboardViewControllerResource<MPInstallmentsViewController>(identifier: "InstallmentsViewController")
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"
      let paymentMethodsListViewController = StoryboardViewControllerResource<MPPaymentMethodsListViewController>(identifier: "PaymentMethodsListViewController")
      
      func cardIssuersViewController(_: Void = ()) -> MPCardIssuersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cardIssuersViewController)
      }
      
      func finishPaymentViewController(_: Void = ()) -> MPFinishPaymentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: finishPaymentViewController)
      }
      
      func installmentsViewController(_: Void = ()) -> MPInstallmentsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: installmentsViewController)
      }
      
      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }
      
      func paymentMethodsListViewController(_: Void = ()) -> MPPaymentMethodsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentMethodsListViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "avatar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'avatar' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().installmentsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'installmentsViewController' could not be loaded from storyboard 'Main' as 'MPInstallmentsViewController'.") }
        if _R.storyboard.main().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
        if _R.storyboard.main().cardIssuersViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cardIssuersViewController' could not be loaded from storyboard 'Main' as 'MPCardIssuersViewController'.") }
        if _R.storyboard.main().paymentMethodsListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentMethodsListViewController' could not be loaded from storyboard 'Main' as 'MPPaymentMethodsListViewController'.") }
        if _R.storyboard.main().finishPaymentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'finishPaymentViewController' could not be loaded from storyboard 'Main' as 'MPFinishPaymentViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
